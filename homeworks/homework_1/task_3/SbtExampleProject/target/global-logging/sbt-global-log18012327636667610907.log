[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\79995\AppData\Local\Temp\idea11.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\79995\AppData\Local\Temp\idea11.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.11.6 (Oracle Corporation Java 22.0.1)
[debug] Load.defaultLoad until apply took 167.8601ms
[debug]           Load.loadUnit: plugins took 112.0314ms
[debug]           Load.loadUnit: defsScala took 0.248ms
[debug] [Loading] Scanning directory C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project
[debug]             Load.loadUnit: mkEval took 3.3077ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.9284 ms
[info] loading settings for project sbtexampleproject-build from idea11.sbt...
[debug]               Load.resolveProject(sbtexampleproject-build) took 38.4982ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sbtexampleproject-build, base: C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project, plugins: List(<none>))) took 63.2381ms
[debug] [Loading] Done in C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project, returning: (sbtexampleproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 239.453ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.8335ms
[debug]         Load.loadUnit(file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/project/, ...) took 368.1814ms
[debug]       Load.apply: load took 492.967ms
[debug]       Load.apply: resolveProjects took 2.94ms
[debug]       Load.apply: finalTransforms took 56.8239ms
[debug]       Load.apply: config.delegates took 8.3677ms
[debug]       Load.apply: Def.make(settings)... took 701.2613ms
[debug]       Load.apply: structureIndex took 134.8735ms
[debug]       Load.apply: mkStreams took 2.1315ms
[info] loading project definition from C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2615.7599ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\79995\IdeaProjects\naumen\SbtExampleProject
[debug]       Load.loadUnit: mkEval took 0.2275ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7968 ms
[info] loading settings for project root from build.sbt...
[debug]         Load.resolveProject(root) took 40.9195ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\79995\IdeaProjects\naumen\SbtExampleProject, plugins: List(<none>))) took 45.6885ms
[debug] [Loading] Done in C:\Users\79995\IdeaProjects\naumen\SbtExampleProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 141.7215ms
[debug]     Load.loadUnit: cleanEvalClasses took 18.2257ms
[debug]   Load.loadUnit(file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/, ...) took 2778.2221ms
[debug] Load.apply: load took 2806.8606ms
[debug] Load.apply: resolveProjects took 0.2227ms
[debug] Load.apply: finalTransforms took 41.3653ms
[debug] Load.apply: config.delegates took 0.3369ms
[debug] Load.apply: Def.make(settings)... took 105.0565ms
[debug] Load.apply: structureIndex took 34.3667ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to SbtExampleProject (in build file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63214 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63214, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SbtExampleProject (in build file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/)
[debug] > Exec(idea-shell, None, None)
