[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\79995\AppData\Local\Temp\idea3.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\79995\AppData\Local\Temp\idea3.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.11.6 (Oracle Corporation Java 22.0.1)
[debug] Load.defaultLoad until apply took 93.3203ms
[debug]           Load.loadUnit: plugins took 107.2815ms
[debug]           Load.loadUnit: defsScala took 0.3576ms
[debug] [Loading] Scanning directory C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project
[debug]             Load.loadUnit: mkEval took 22.4485ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.2469 ms
[info] loading settings for project sbtexampleproject-build from idea3.sbt...
[debug]               Load.resolveProject(sbtexampleproject-build) took 34.3389ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sbtexampleproject-build, base: C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project, plugins: List(<none>))) took 63.2362ms
[debug] [Loading] Done in C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project, returning: (sbtexampleproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 258.3541ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.1597ms
[debug]         Load.loadUnit(file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/project/, ...) took 384.193ms
[debug]       Load.apply: load took 566.1828ms
[debug]       Load.apply: resolveProjects took 3.2867ms
[debug]       Load.apply: finalTransforms took 59.3108ms
[debug]       Load.apply: config.delegates took 12.1951ms
[debug]       Load.apply: Def.make(settings)... took 691.3799ms
[debug]       Load.apply: structureIndex took 175.2039ms
[debug]       Load.apply: mkStreams took 6.8887ms
[info] loading project definition from C:\Users\79995\IdeaProjects\naumen\SbtExampleProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2847.01ms
[debug]     Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\79995\IdeaProjects\naumen\SbtExampleProject
[debug]       Load.loadUnit: mkEval took 0.5307ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2143 ms
[info] loading settings for project root from build.sbt...
[debug]         Load.resolveProject(root) took 66.1758ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\79995\IdeaProjects\naumen\SbtExampleProject, plugins: List(<none>))) took 73.174ms
[debug] [Loading] Done in C:\Users\79995\IdeaProjects\naumen\SbtExampleProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 160.5323ms
[debug]     Load.loadUnit: cleanEvalClasses took 33.1644ms
[debug]   Load.loadUnit(file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/, ...) took 3042.7633ms
[debug] Load.apply: load took 3066.8917ms
[debug] Load.apply: resolveProjects took 0.1683ms
[debug] Load.apply: finalTransforms took 67.0475ms
[debug] Load.apply: config.delegates took 0.3961ms
[debug] Load.apply: Def.make(settings)... took 179.9754ms
[debug] Load.apply: structureIndex took 31.2441ms
[debug] Load.apply: mkStreams took 0.0018ms
[info] set current project to SbtExampleProject (in build file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63214 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63214, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SbtExampleProject (in build file:/C:/Users/79995/IdeaProjects/naumen/SbtExampleProject/)
[debug] > Exec(idea-shell, None, None)
